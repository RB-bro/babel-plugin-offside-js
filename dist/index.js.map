{"version":3,"sources":["../code/index.js"],"names":["assert","require","babylon","tt","tokTypes","_g_offsidePluginOpts","default_offsidePluginOpts","keyword_blocks","_base_module_parse","parse","input","options","offsidePluginOpts","undefined","Parser","hookBabylon","baseProto","prototype","pp","Object","create","tgt_patch","braceL","fn_updateContext","updateContext","prevType","constructor","Error","_base_parse","initOffside","OffsideBreakout","offsideBreakout","state","offside","offsideNextOp","offside_lines","parseOffsideIndexMap","_pos","pos","defineProperty","enumerable","get","set","offPos","offsidePos","tt_offside","braceR","parenL","parenR","bracketL","bracketR","tt_offside_keyword_with_args","Set","_if","_while","_for","_catch","_switch","at_offside","tokenPre","tokenPost","nestInner","codeBlock","extraChars","keyword_args","inKeywordArg","_base_finishToken","finishToken","type","val","offsideRecentOp","isKeywordAllowed","isLookahead","dot","exprAllowed","context","length","tip_context","isExpr","has","lookahead","at","doubleColon","pos0","start","pos1","str_op","slice","split","op","finishOffsideOp","eof","popOffside","offsideBlock","stackTop","line0","curLine","first","line","indent","innerIndent","last","cur","content","stack","blk","push","_base_skipSpace","skipSpace","posLastContent","err","_base_readToken","readToken","code","pop","tt_post","rx_offside","lines","ans","replace","match","keyword_block_parents","IfStatement","ForStatement","WhileStatement","DoWhileStatement","lint_keyword_block_parents","keys","babel_plugin_id","Date","now","module","exports","babel","name","post","manipulateOptions","opts","parserOpts","plugins","filter","plugin","key","map","visitor","ExpressionStatement","path","parent","keyword","node","alternate","buildCodeFrameError","assign"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\nconst assert = require('assert')\nconst babylon = require('babylon')\nconst tt = babylon.tokTypes\n\nvar _g_offsidePluginOpts\nconst default_offsidePluginOpts =\n  @{} keyword_blocks: true\n\nconst _base_module_parse = babylon.parse\nbabylon.parse = (input, options) => ::\n  _g_offsidePluginOpts = options ? options.offsidePluginOpts : undefined\n  return _base_module_parse(input, options)\n\nconst Parser = hookBabylon()\nconst baseProto = Parser.prototype\nconst pp = Parser.prototype = Object.create(baseProto)\n\nfunction hookBabylon() ::\n  // abuse Babylon token updateContext callback extract\n  // the reference to Parser\n\n  let Parser\n  let tgt_patch = babylon.tokTypes.braceL\n  let fn_updateContext = tgt_patch.updateContext\n  tgt_patch.updateContext = function (prevType) ::\n    tgt_patch.updateContext = fn_updateContext\n    Parser = this.constructor\n\n  babylon.parse('{}')\n  if (!Parser) ::\n    throw new Error @ \"Failed to hook Babylon Parser\"\n  return Parser\n\n\n\npp._base_parse = baseProto.parse\npp.parse = function() ::\n  this.initOffside()\n  return this._base_parse()\n\n\nclass OffsideBreakout extends Error {}\nconst offsideBreakout = new OffsideBreakout()\n\npp.initOffside = function() ::\n  this.state.offside = []\n  this.state.offsideNextOp = null\n  this.offside_lines = parseOffsideIndexMap(this.input)\n  this.offsidePluginOpts = _g_offsidePluginOpts || {}\n  _g_offsidePluginOpts = null\n\n  this.state._pos = this.state.pos\n  Object.defineProperty @ this.state, 'pos',\n    @{} enumerable: true\n      , get() :: return this._pos\n      , set(pos) ::\n          // interrupt skipSpace algorithm when we hit our position 'breakpoint'\n          let offPos = this.offsidePos\n          if (offPos>=0 && (pos > offPos)) ::\n            throw offsideBreakout\n\n          this._pos = pos\n\n\nlet tt_offside =\n  @{} '{': tt.braceL,   '}': tt.braceR\n    , '(': tt.parenL,   ')': tt.parenR\n    , '[': tt.bracketL, ']': tt.bracketR\n\nlet tt_offside_keyword_with_args = new Set @\n  @[] tt._if, tt._while, tt._for\n    , tt._catch, tt._switch\n\nlet at_offside =\n  @{} '::':   {tokenPre: '{', tokenPost: '}', nestInner: false, codeBlock: true}\n    , '::@':  {tokenPre: '(', tokenPost: ')', nestInner: false, extraChars: 1}\n    , '::()': {tokenPre: '(', tokenPost: ')', nestInner: false, extraChars: 2}\n    , '::{}': {tokenPre: '{', tokenPost: '}', nestInner: false, extraChars: 2}\n    , '::[]': {tokenPre: '[', tokenPost: ']', nestInner: false, extraChars: 2}\n    , '@':    {tokenPre: '(', tokenPost: ')', nestInner: true}\n    , '@()':  {tokenPre: '{', tokenPost: '}', nestInner: true, extraChars: 2}\n    , '@{}':  {tokenPre: '{', tokenPost: '}', nestInner: true, extraChars: 2}\n    , '@[]':  {tokenPre: '[', tokenPost: ']', nestInner: true, extraChars: 2}\n    // note:  no '@()' -- standardize to use single-char '@ ' instead\n    , keyword_args: {tokenPre: '(', tokenPost: ')', nestInner: false, inKeywordArg: true}\n\npp._base_finishToken = baseProto.finishToken\npp.finishToken = function(type, val) ::\n  const state = this.state\n  state.offsideRecentOp = null\n\n  let isKeywordAllowed = !this.isLookahead\n    && tt.dot !== state.type\n\n  if (isKeywordAllowed && state.exprAllowed && state.context.length) ::\n    const tip_context = state.context[state.context.length-1]\n    isKeywordAllowed = !tip_context || !tip_context.isExpr\n\n  if (isKeywordAllowed && tt_offside_keyword_with_args.has(type)) ::\n    const lookahead = this.lookahead()\n\n    if (tt.parenL !== lookahead.type) ::\n      state.offsideNextOp = at_offside.keyword_args\n    else if (lookahead.offsideRecentOp === at_offside['@']) ::\n      state.offsideNextOp = at_offside.keyword_args\n\n    return this._base_finishToken(type, val)\n\n  if (type === tt.at || type === tt.doubleColon) ::\n    const pos0 = state.start, pos1 = state.pos + 2\n    const str_op = this.input.slice(pos0, pos1).split(/\\s/, 1)[0]\n\n    const op = at_offside[str_op]\n    if (op) :: return this.finishOffsideOp(op)\n\n  if (tt.eof === type) ::\n    if (state.offside.length) ::\n      return this.popOffside()\n\n  return this._base_finishToken(type, val)\n\n\n\npp.offsideBlock = function (op, stackTop) ::\n  let offside_lines = this.offside_lines\n\n  const line0 = this.state.curLine\n  const first = offside_lines[line0]\n  const nestInner = op.nestInner && stackTop && line0 === stackTop.first.line\n  const indent = nestInner ? stackTop.innerIndent : first.indent\n  let line = 1+line0, last = first\n  let innerIndent = offside_lines[line].indent\n\n  while (line < offside_lines.length) ::\n    let cur = offside_lines[line]\n    if (cur.content && indent >= cur.indent) ::\n      break\n\n    line++; last = cur\n    if (innerIndent > cur.indent) ::\n      innerIndent = cur.indent\n\n  // cap to \n  innerIndent = first.indent > innerIndent\n    ? first.indent : innerIndent\n\n  return {op, innerIndent, first, last, nestInner}\n\n\npp.finishOffsideOp = function (op) ::\n  this.state.offsideRecentOp = op\n  const stack = this.state.offside\n  let stackTop = stack[stack.length - 1]\n  if (stackTop && stackTop.inKeywordArg && op.codeBlock) ::\n    this.popOffside()\n    this.state.offsideNextOp = op\n    return\n\n  if (op.extraChars) ::\n    this.state.pos += op.extraChars\n\n  this._base_finishToken(tt_offside[op.tokenPre])\n\n  if (this.isLookahead) :: return\n\n  stackTop = stack[stack.length - 1]\n  let blk = this.offsideBlock(op, stackTop)\n  blk.inKeywordArg = op.inKeywordArg || stackTop && stackTop.inKeywordArg\n  this.state.offside.push(blk)\n\n\npp._base_skipSpace = baseProto.skipSpace\npp.skipSpace = function() ::\n  if (null !== this.state.offsideNextOp) :: return\n\n  const stack = this.state.offside\n  let stackTop\n  if (stack && stack.length) ::\n    stackTop = stack[stack.length-1]\n    this.state.offsidePos = stackTop.last.posLastContent\n  else :: this.state.offsidePos = -1\n\n  try ::\n    this._base_skipSpace()\n    this.state.offsidePos = -1\n  catch (err) ::\n    if (err !== offsideBreakout) :: throw err\n\n\npp._base_readToken = baseProto.readToken\npp.readToken = function(code) ::\n  const offsideNextOp = this.state.offsideNextOp\n  if (null !== offsideNextOp) ::\n    this.state.offsideNextOp = null\n    return this.finishOffsideOp(offsideNextOp)\n\n  else if (this.state.pos === this.state.offsidePos) ::\n    return this.popOffside()\n\n  else ::\n    return this._base_readToken(code)\n\npp.popOffside = function() ::\n  const stack = this.state.offside\n  let stackTop = this.isLookahead\n    ? stack[stack.length-1]\n    : stack.pop()\n  this.state.offsidePos = -1\n\n  const op = stackTop.op\n  const tt_post = tt_offside[op.tokenPost]\n  this._base_finishToken(tt_post)\n  return stackTop\n\n\n\nconst rx_offside = /^([ \\t]*)(.*)$/mg\nfunction parseOffsideIndexMap(input) ::\n  let lines = [null], posLastContent=0, last=['', 0]\n\n  let ans = input.replace @ rx_offside, (match, indent, content, pos) => ::\n    if (!content) ::\n      [indent, posLastContent] = last // blank line; use last valid content as end\n    else ::\n      // valid content; set last to current indent\n      posLastContent = pos + match.length\n      last = [indent, posLastContent]\n\n    lines.push({line: lines.length, posLastContent, indent, content})\n    return ''\n\n  return lines\n\n\nconst keyword_block_parents =\n @{} IfStatement: 'if'\n   , ForStatement: 'for'\n   , WhileStatement: 'while'\n   , DoWhileStatement: 'do-while'\nconst lint_keyword_block_parents = new Set @ Object.keys @ keyword_block_parents\n\nconst babel_plugin_id = `babel-plugin-offside--${Date.now()}`\nmodule.exports = exports = (babel) => ::\n  return ::\n    name: babel_plugin_id\n    , post(state) ::\n      //console.dir @ state, @{} colors: true\n\n    , manipulateOptions(opts, parserOpts) ::\n        parserOpts.plugins.push('decorators', 'functionBind')\n        const offsidePluginOpts = opts.plugins\n          .filter @ plugin => plugin[0] && babel_plugin_id === plugin[0].key\n          .map @ plugin => plugin[1]\n          .pop()\n        parserOpts.offsidePluginOpts = offsidePluginOpts || default_offsidePluginOpts\n\n    , visitor: ::\n        ExpressionStatement(path) ::\n          if (!this.opts.keyword_blocks) :: return\n          if (!lint_keyword_block_parents.has(path.parent.type)) :: return\n\n          let keyword = keyword_block_parents[path.parent.type]\n          if ('if' === keyword && path.node === path.parent.alternate) ::\n            keyword = 'else' // fixup if/else combined parent condition\n\n          throw path.buildCodeFrameError @\n            `Keyword '${keyword}' should be followed by a block statement using '::' or matching '{' / '}'. \\n` +\n            `    (From 'keyword_blocks' enforcement option of babel-plugin-offside)`\n\n\nObject.assign @ exports,\n  @{}\n    hookBabylon,\n    parseOffsideIndexMap,\n\n"]}