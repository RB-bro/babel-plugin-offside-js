{"version":3,"sources":["../code/index.js"],"names":["assert","require","babylon","tt","tokTypes","Parser","hookBabylon","baseProto","prototype","pp","Object","create","tgt_patch","braceL","fn_updateContext","updateContext","prevType","constructor","parse","Error","initOffside","call","OffsideBreakout","offsideBreakout","state","offside","offsideNextOp","offside_lines","parseOffsideIndexMap","input","_pos","pos","defineProperty","enumerable","get","set","offPos","offsidePos","tt_offside","braceR","parenL","parenR","bracketL","bracketR","tt_offside_keyword_with_args","Set","_if","_while","_for","_catch","_switch","tt_offside_keyword_with_block","_try","_finally","_else","_do","at_offside","tokenPre","tokenPost","nestInner","codeBlock","extraChars","continueKeyword","keyword_args","inKeywordArg","_base_finishToken","finishToken","type","val","isLookahead","offsideRecentOp","has","lookahead","console","log","raise","label","at","doubleColon","pos0","start","pos1","str_op","slice","split","op","finishOffsideOp","eof","length","popOffside","offsideBlock","stackTop","line0","curLine","first","line","indent","innerIndent","last","cur","content","stack","blk","push","_base_skipSpace","skipSpace","posLastContent","err","_base_readToken","readToken","code","pop","tt_post","rx_offside","lines","ans","replace","match","module","exports","babel","manipulateOptions","opts","parserOpts","plugins","assign"],"mappings":"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","file":"index.js","sourcesContent":["'use strict'\nconst assert = require('assert')\nconst babylon = require('babylon')\nconst tt = babylon.tokTypes\n\nconst Parser = hookBabylon()\nconst baseProto = Parser.prototype\nconst pp = Parser.prototype = Object.create(baseProto)\n\nfunction hookBabylon() ::\n  // abuse Babylon token updateContext callback extract\n  // the reference to Parser\n\n  let Parser\n  let tgt_patch = babylon.tokTypes.braceL\n  let fn_updateContext = tgt_patch.updateContext\n  tgt_patch.updateContext = function (prevType) ::\n    tgt_patch.updateContext = fn_updateContext\n    Parser = this.constructor\n\n  babylon.parse('{}')\n  if (!Parser)\n    throw new Error @ \"Failed to hook Babylon Parser\"\n  return Parser\n\n\n\npp.parse = function() ::\n  this.initOffside()\n  return baseProto.parse.call(this)\n\n\nclass OffsideBreakout extends Error {}\nconst offsideBreakout = new OffsideBreakout()\n\npp.initOffside = function() ::\n  this.state.offside = []\n  this.state.offsideNextOp = null\n  this.offside_lines = parseOffsideIndexMap(this.input)\n\n  this.state._pos = this.state.pos\n  Object.defineProperty @ this.state, 'pos',\n    @{} enumerable: true\n      , get() :: return this._pos\n      , set(pos) ::\n          // interrupt skipSpace algorithm when we hit our position 'breakpoint'\n          let offPos = this.offsidePos\n          if (offPos>=0 && (pos > offPos))\n            throw offsideBreakout\n\n          this._pos = pos\n\n\nlet tt_offside =\n  @{} '{': tt.braceL,   '}': tt.braceR\n    , '(': tt.parenL,   ')': tt.parenR\n    , '[': tt.bracketL, ']': tt.bracketR\n\nlet tt_offside_keyword_with_args = new Set @\n  @[] tt._if, tt._while, tt._for\n    , tt._catch, tt._switch\n\nlet tt_offside_keyword_with_block = new Set @\n  @[] tt._try, tt._finally, tt._else, tt._do\n\nlet at_offside =\n  @{} '::':   {tokenPre: '{', tokenPost: '}', nestInner: false, codeBlock: true}\n    , '::@':  {tokenPre: '(', tokenPost: ')', nestInner: false, extraChars: 1}\n    , '::()': {tokenPre: '(', tokenPost: ')', nestInner: false, extraChars: 2}\n    , '::{}': {tokenPre: '{', tokenPost: '}', nestInner: false, extraChars: 2}\n    , '::[]': {tokenPre: '[', tokenPost: ']', nestInner: false, extraChars: 2}\n    , '@':    {tokenPre: '(', tokenPost: ')', nestInner: true, continueKeyword: true}\n    , '@()':  {tokenPre: '{', tokenPost: '}', nestInner: true, extraChars: 2}\n    , '@{}':  {tokenPre: '{', tokenPost: '}', nestInner: true, extraChars: 2}\n    , '@[]':  {tokenPre: '[', tokenPost: ']', nestInner: true, extraChars: 2}\n    // note:  no '@()' -- standardize to use single-char '@ ' instead\n    , keyword_args: {tokenPre: '(', tokenPost: ')', nestInner: false, inKeywordArg: true}\n\npp._base_finishToken = baseProto.finishToken\npp.finishToken = function(type, val) ::\n  const isLookahead = this.isLookahead\n  this.state.offsideRecentOp = null\n  if (!isLookahead && tt_offside_keyword_with_args.has(type)) ::\n    const lookahead = this.lookahead()\n    if (tt.parenL !== lookahead.type) ::\n      this.state.offsideNextOp = at_offside.keyword_args\n    else if (lookahead.offsideRecentOp === at_offside['@']) ::\n      this.state.offsideNextOp = at_offside.keyword_args\n    else ::\n      // good spot for an option flag for flagging potential errors\n\n    return this._base_finishToken(type, val)\n\n  if (!isLookahead && tt_offside_keyword_with_block.has(type)) ::\n    const lookahead = this.lookahead()\n    if (tt.braceL !== lookahead.type && tt._if !== lookahead.type) ::\n      // good spot for an option flag for flagging potential errors\n      console.log @ lookahead.type, \n      this.raise @ this.state.pos, `Keyword \"${type.label}\" should be followed by a code block. ('::' or '{}' or 'if')`\n\n    return this._base_finishToken(type, val)\n\n  if (type === tt.at || type === tt.doubleColon) ::\n    const pos0 = this.state.start, pos1 = this.state.pos + 2\n    const str_op = this.input.slice(pos0, pos1).split(/\\s/, 1)[0]\n\n    const op = at_offside[str_op]\n    if (op) :: return this.finishOffsideOp(op)\n\n  if (tt.eof === type) ::\n    if (this.state.offside.length) ::\n      return this.popOffside()\n\n  return this._base_finishToken(type, val)\n\n\n\npp.offsideBlock = function (op, stackTop) ::\n  let offside_lines = this.offside_lines\n\n  const line0 = this.state.curLine\n  const first = offside_lines[line0]\n  const nestInner = op.nestInner && stackTop && line0 === stackTop.first.line\n  const indent = nestInner ? stackTop.innerIndent : first.indent\n  let line = 1+line0, last = first\n  let innerIndent = offside_lines[line].indent\n\n  while (line < offside_lines.length) ::\n    let cur = offside_lines[line]\n    if (cur.content && indent >= cur.indent) ::\n      break\n\n    line++; last = cur\n    if (innerIndent > cur.indent) ::\n      innerIndent = cur.indent\n\n  // cap to \n  innerIndent = first.indent > innerIndent\n    ? first.indent : innerIndent\n\n  return {op, innerIndent, first, last, nestInner}\n\n\npp.finishOffsideOp = function (op) ::\n  this.state.offsideRecentOp = op\n  let stack = this.state.offside\n  let stackTop = stack[stack.length - 1]\n  if (stackTop && stackTop.inKeywordArg && op.codeBlock) ::\n    this.popOffside()\n    this.state.offsideNextOp = op\n    return\n\n  if (op.extraChars) ::\n    this.state.pos += op.extraChars\n\n  this._base_finishToken(tt_offside[op.tokenPre])\n\n  if (this.isLookahead) :: return\n\n  stackTop = stack[stack.length - 1]\n  let blk = this.offsideBlock(op, stackTop)\n  blk.inKeywordArg = op.inKeywordArg || stackTop && stackTop.inKeywordArg\n  this.state.offside.push(blk)\n\n\npp._base_skipSpace = baseProto.skipSpace\npp.skipSpace = function() ::\n  if (null !== this.state.offsideNextOp) :: return\n\n  let stackTop, stack = this.state.offside\n  if (stack && stack.length) ::\n    stackTop = stack[stack.length-1]\n    this.state.offsidePos = stackTop.last.posLastContent\n  else :: this.state.offsidePos = -1\n\n  try ::\n    this._base_skipSpace()\n    this.state.offsidePos = -1\n  catch (err) ::\n    if (err !== offsideBreakout) throw err\n\n\npp._base_readToken = baseProto.readToken\npp.readToken = function(code) ::\n  const offsideNextOp = this.state.offsideNextOp\n  if (null !== offsideNextOp) ::\n    this.state.offsideNextOp = null\n    return this.finishOffsideOp(offsideNextOp)\n\n  else if (this.state.pos === this.state.offsidePos) ::\n    return this.popOffside()\n\n  else ::\n    return this._base_readToken(code)\n\npp.popOffside = function() ::\n  let stack = this.state.offside\n  let stackTop = this.isLookahead\n    ? stack[stack.length-1]\n    : stack.pop()\n  this.state.offsidePos = -1\n\n  const op = stackTop.op\n  const tt_post = tt_offside[op.tokenPost]\n  this._base_finishToken(tt_post)\n  return stackTop\n\n\n\nconst rx_offside = /^([ \\t]*)(.*)$/mg\nfunction parseOffsideIndexMap(input) ::\n  let lines = [null], posLastContent=0, last=['', 0]\n\n  let ans = input.replace @ rx_offside, (match, indent, content, pos) => ::\n    if (!content) ::\n      [indent, posLastContent] = last // blank line; use last valid content as end\n    else ::\n      // valid content; set last to current indent\n      posLastContent = pos + match.length\n      last = [indent, posLastContent]\n\n    lines.push({line: lines.length, posLastContent, indent, content})\n    return ''\n\n  return lines\n\n\n\nmodule.exports = exports = (babel) => @\n  @{}\n    manipulateOptions(opts, parserOpts) ::\n      parserOpts.plugins.push('decorators', 'functionBind')\n\n\nObject.assign @ exports,\n  @{}\n    hookBabylon,\n    parseOffsideIndexMap,\n\n"]}